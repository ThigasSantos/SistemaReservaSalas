@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@inject UserServices userServices
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject StateContainer stateContainer
@inject ReservaSalaAuthenticationStateProvider ReservaSalaAuthenticationStateProvider

<h3>Login</h3>

<body>
    <div>
        <button @onclick="LoginAsync">Login</button>
    </div>
</body>

@* <EditForm>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Senha:</label>
        <InputText id="password" class="form-control" @bind-Value="user.Senha" type="password" />
        <ValidationMessage For="@(() => user.Senha)" />
    </div>

    <button class="btn btn-danger" @onclick="(()=>HandleValidSubmit(user))">Deletar</button>
</EditForm> *@

@code {
    private User user = new User();

    @* private async Task HandleValidSubmit(User user)
    {
        User result = await userServices.Login(user);

        if (result != null)
        {
            stateContainer.user = result;
            navigationManager.NavigateTo("/sala");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Usuário ou senha inválidos");
        }
    } *@

    public async Task LoginAsync(){
        Console.WriteLine("LOGIN+++++++++++++");
        await ReservaSalaAuthenticationStateProvider.LoginAsync("teste@teste.com", "teste");

        if(ReservaSalaAuthenticationStateProvider.CurrentUser.Email is not null) {
            navigationManager.NavigateTo("/sala");
        }
    }
}
