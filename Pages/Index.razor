@page "/"
@inject SalaServices service
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject StateContainer stateContainer

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sala de Reservas</title>
</head>

<body>

    <!-- Cabeçalho -->
    <header>
        <h1>Sistema de Reservas de Salas</h1>
        <div class="account-info">
            <span>Minha Conta</span>
            <a href="#">Sair</a>
        </div>
    </header>

    <!-- Salas e Reservas -->
    <div class="container">

        <!-- Sala List -->
        <div id="rooms-container">
            <h2>Lista de Salas</h2>
            <!-- Sala items will be added dynamically here -->
            @if (Salas.Any())
            {
                @foreach (var sala in Salas)
                {
                    <div class="room-item" onclick="showRoomReservations('Sala A')">@sala.Nome</div>
                }
            }
            <button id="add-room-btn" onclick="showRoomForm()">Cadastrar Sala</button>
        </div>

        <!-- Reserva List -->
        <div id="reservations-container">
            <!-- Reserva items will be added dynamically here -->
            <button id="back-btn" onclick="backToRooms()">Voltar para Salas</button>
        </div>

        <!-- Detalhes da Sala ou Cadastro de Sala -->
        <div id="room-form">
            <h2>Cadastrar Sala</h2>
            <div class="form-group">
                <label for="room-name">Nome da Sala:</label>
                <input type="text" id="room-name" @bind-value="@Room.Nome" required>
                <label for="room-capacity">Capacidade:</label>
                <input type="number" id="room-capacity" @bind="@Room.Capacidade" required>
                <label for="room-description">Descrição:</label>
                <input type="text" id="room-description" @bind="@Room.Descricao" required>
            </div>
            <div class="form-group">
                <button @onclick="AdicionarSala">Cadastrar</button>
            </div>
            <button id="back-btn" onclick="backToRooms()">Cancelar</button>
        </div>

    </div>
</body>
<script>
    function backToRooms() {
        // Reset the content and display the rooms-container
        document.getElementById('reservations-container').innerHTML = '';
        document.getElementById('reservations-container').style.display = 'none';
    }

    function showRoomForm() {
        // Display the room-form
        document.getElementById('room-form').style.display = 'block';
    }

    function hideRoomForm() {
        // Reset the content and hide the room-form
        document.getElementById('room-form').style.display = 'none';
        document.getElementById('room-name').value = '';
        document.getElementById('room-capacity').value = '';
        document.getElementById('room-description').value = '';
    }
</script>

@code {

    List<Sala> Salas = new List<Sala>();
    Sala Room { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await AtualizaSalas();
    }
    protected override void OnInitialized(){
        if (stateContainer.sala is not null){
        Room = stateContainer.sala;
        }
    }

    private async Task AtualizaSalas()
    {
        Salas = await service.RetornaSalaAsync();
    }

    private async Task AdicionarSala()
    {
        string mensagem;
        if (stateContainer.sala is null)
        {
            Room.Ativo = true;
            await service.AddRoomAsync(Room);
            mensagem = "Produto salvo com sucesso";
        }
        Room = new();
        await AtualizaSalas();
        JsRuntime.InvokeVoidAsync("hideRoomForm", "room-form");
    }
    private async Task ApagarSala(Sala sala)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Você tem certeza que deseja apagar a sala ?"); // Confirm
        if (confirmed)
        {
            await service.DeleteRoomAsync(sala);
            await AtualizaSalas();
            await JsRuntime.InvokeVoidAsync("alert", "Sala Deletada!");
        }
    }

    private void EditarSala(Sala sala)
    {
        stateContainer.AtualizaSala(sala);
        navigationManager.NavigateTo("/NovaSala");
    }


}