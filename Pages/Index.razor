@page "/sala"
@inject SalaServices service
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@inject StateContainer stateContainer
@inject ReservaSalaAuthenticationStateProvider ReservaSalaAuthenticationStateProvider

<body>
<header>
        <h1>Sistema de Reservas de Salas</h1>
        <div class="account-info">
            <span>Minha Conta</span>
            <button @onclick="Logout">Sair</button>
        </div>
    </header>

    <!-- Salas e Reservas -->
    <div class="container">

        <!-- Sala List -->
        <div id="rooms-container">
            <h2>Lista de Salas</h2>
            <!-- Sala items will be added dynamically here -->
            @if (Salas.Any())
            {
                @foreach (var sala in Salas)
                {
                    <div class="room-item" onclick="showRoomReservations(@sala.Id)">
                        <span class="room-list-title">@sala.Nome</span>

                        <button class="room-button-action" @onclick="() => AbrirTelaEditarSala(sala)">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="room-button-action" @onclick="() => ApagarSala(sala)">
                            <i class="bi bi-trash"></i>
                        </button>

                    </div>
                }
            }
            <AuthorizeView>
                <Authorized>
                    <button id="add-room-btn" @onclick="AbrirTelaNovaSala">Cadastrar Sala</button>
                </Authorized>
            </AuthorizeView>
            
        </div>

        <!-- Reserva List -->
        <div id="reservations-container">
            <!-- Reserva items will be added dynamically here -->
            <button id="back-btn" onclick="backToRooms()">Voltar</button>
        </div>

        <!-- Detalhes da Sala ou Cadastro de Sala -->
        <div id="room-form">
            <h2>Informações Sala</h2>
            <div class="form-group">
                <label for="room-name">Nome da Sala:</label>
                <input type="text" id="room-name" @bind-value="@Room.Nome" required>
                <label for="room-capacity">Capacidade:</label>
                <input type="number" id="room-capacity" @bind="@Room.Capacidade" required>
                <label for="room-description">Descrição:</label>
                <input type="text" id="room-description" @bind="@Room.Descricao" required>
            </div>
            <div class="form-group">
                <button @onclick="AdicionarSala">Salvar</button>
            </div>
            <button id="back-btn" onclick="hideRoomForm()">Cancelar</button>
        </div>

    </div>
    <!-- Cabeçalho -->
    
</body>
<script>
    function backToRooms() {
        // Reset the content and display the rooms-container
        document.getElementById('reservations-container').innerHTML = '';
        document.getElementById('reservations-container').style.display = 'none';
    }

    function showRoomForm() {
        // Display the room-form
        document.getElementById('room-form').style.display = 'block';
    }

    function showRoomReservations(roomName) {
        // Display the reservations-container
        document.getElementById('reservations-container').style.display = 'block';
        // Add the room name to the reservations-container
        document.getElementById('reservations-container').innerHTML = '<h2>Reservas da ' + roomName + '</h2>';
    }

    function showRoomEditForm(roomName, roomCapacity, roomDescription) {
        // Display the room-form
        document.getElementById('room-form').style.display = 'block';
        // Add the room name to the room-form
        document.getElementById('room-name').value = roomName;
        document.getElementById('room-capacity').value = roomCapacity;
        document.getElementById('room-description').value = roomDescription;
    }

    function hideRoomForm() {
        // Reset the content and hide the room-form
        document.getElementById('room-form').style.display = 'none';
        document.getElementById('room-name').value = '';
        document.getElementById('room-capacity').value = '';
        document.getElementById('room-description').value = '';
    }
</script>

@code {

    List<Sala> Salas = new List<Sala>();
    Sala Room { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await AtualizaSalas();
    }

    private async Task AtualizaSalas()
    {
        Salas = await service.RetornaSalaAsync();
    }

    private async void AbrirTelaNovaSala(){
        Room = new();
        await JsRuntime.InvokeVoidAsync("showRoomForm");
        
    }

    private async void AbrirTelaEditarSala(Sala sala)
    {        
        Room = sala;
        await JsRuntime.InvokeVoidAsync("showRoomEditForm", sala.Nome, sala.Capacidade, sala.Descricao);
    }
   
    private async Task AdicionarSala()
    {
        string mensagem = "";        
        try
        {
            if (Room.Id == 0)
            {
                Room.Ativo = true;
                await service.AddRoomAsync(Room);
                mensagem = "Produto salvo com sucesso";
            }
            else
            {
                await service.UpdateRoomAsync(Room);
                mensagem = "Produto atualizado com sucesso";
                stateContainer.sala = null;
            }

            Room = new();
            await AtualizaSalas();
            JsRuntime.InvokeVoidAsync("hideRoomForm", "room-form");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro ao tentar atualizar/adicionar sala");
        }
        finally
        {
            await JsRuntime.InvokeVoidAsync("alert", mensagem);
        }

    }
    private async Task ApagarSala(Sala sala)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Você tem certeza que deseja apagar a sala ?"); // Confirm
        if (confirmed)
        {
            await service.DeleteRoomAsync(sala);
            await AtualizaSalas();
            await JsRuntime.InvokeVoidAsync("alert", "Sala Deletada!");
        }
    }

    private async Task Logout()
    {
        await ReservaSalaAuthenticationStateProvider.LogoutAsync();
        navigationManager.NavigateTo("/login");
    }
}